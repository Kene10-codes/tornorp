{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/kenechukwu/Documents/assistance/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Formik } from 'formik';\nimport './index.css'; // import App from './App';\n\nimport reportWebVitals from './reportWebVitals';\nconst scaleNames = {\n  c: 'Celsius',\n  f: 'Fahrenheit'\n};\n\nfunction tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n\n  if (Number.isNaN(input)) {\n    return '';\n  }\n\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  render() {\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: [\"Enter temperature in \", scaleNames[scale], \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: temperature,\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = {\n      temperature: '',\n      scale: 'c'\n    };\n  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({\n      scale: 'c',\n      temperature\n    });\n  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({\n      scale: 'f',\n      temperature\n    });\n  }\n\n  render() {\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(TemperatureInput, {\n        scale: \"c\",\n        temperature: celsius,\n        onTemperatureChange: this.handleCelsiusChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TemperatureInput, {\n        scale: \"f\",\n        temperature: fahrenheit,\n        onTemperatureChange: this.handleFahrenheitChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BoilingVerdict, {\n        celsius: parseFloat(celsius)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Calculator, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 85,\n  columnNumber: 17\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"sources":["/home/kenechukwu/Documents/assistance/src/index.js"],"names":["React","ReactDOM","Formik","reportWebVitals","scaleNames","c","f","tryConvert","temperature","convert","input","parseFloat","Number","isNaN","output","rounded","Math","round","toString","TemperatureInput","Component","constructor","props","handleChange","bind","e","onTemperatureChange","target","value","render","scale","Calculator","handleCelsiusChange","handleFahrenheitChange","state","setState","celsius","toCelsius","fahrenheit","toFahrenheit","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Formik } from 'formik';\nimport './index.css';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst scaleNames = {\n  c: 'Celsius',\n  f: 'Fahrenheit'\n};\nfunction tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n  if (Number.isNaN(input)) {\n    return '';\n  }\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  render() {\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\n        <input value={temperature}\n               onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = {temperature: '', scale: 'c'};\n  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({scale: 'c', temperature});\n  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({scale: 'f', temperature});\n  }\n\n  render() {\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n\n    return (\n      <div>\n        <TemperatureInput\n          scale=\"c\"\n          temperature={celsius}\n          onTemperatureChange={this.handleCelsiusChange} />\n        <TemperatureInput\n          scale=\"f\"\n          temperature={fahrenheit}\n          onTemperatureChange={this.handleFahrenheitChange} />\n        <BoilingVerdict\n          celsius={parseFloat(celsius)} />\n      </div>\n    );\n  }\n}\n\n\n\n\nReactDOM.render(<Calculator />, document.getElementById('root'))\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}